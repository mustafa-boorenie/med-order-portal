// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      Role     @default(DOCTOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[] @relation("DoctorOrders")

  @@map("users")
}

model Patient {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("patients")
}

model Product {
  id             String    @id @default(uuid())
  name           String
  sku            String    @unique
  priceCents     Int
  costCents      Int       @default(0)
  quantity       Int       @default(0)
  expirationDate DateTime?
  parLevel       Int       @default(10)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id           String      @id @default(uuid())
  patientId    String?
  patientName  String      // Keep for backwards compatibility
  patientEmail String      // Keep for backwards compatibility
  doctorId     String?
  totalCents   Int
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  patient     Patient?     @relation(fields: [patientId], references: [id])
  doctor      User?        @relation("DoctorOrders", fields: [doctorId], references: [id])
  items       OrderItem[]
  payments    Payment[]
  pharmacyLog PharmacyLog?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@map("order_items")
}

model Payment {
  id                    String        @id @default(uuid())
  orderId               String
  stripePaymentIntentId String        @unique
  status                PaymentStatus @default(PENDING)
  amountCents           Int
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model PharmacyLog {
  id              String   @id @default(uuid())
  orderId         String   @unique
  requestPayload  Json
  responsePayload Json?
  status          String
  timestamp       DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("pharmacy_logs")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}